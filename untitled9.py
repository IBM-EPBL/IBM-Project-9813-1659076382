# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NMw-kmtU1fqr8-O84HvdLlLBStkVlwxN
"""

from google.colab import drive
drive.mount('/content/drive')

from google.colab import files
uploaded = files.upload()

ls

cd /content/drive/MyDrive/New folder

ls

!unzip Flowers-Dataset.zip

from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale=1./255,zoom_range = 0.2,horizontal_flip =True,vertical_flip =False)

test_datagen = ImageDataGenerator(rescale=1./255)

x_train = train = train_datagen.flow_from_directory(r"/content/drive/MyDrive/New folder/flowers/daisy",target_size = (10,10),class_mode ='categorical',batch_size=10)

x_test = test_datagen.flow_from_directory(r"/content/drive/MyDrive/New folder/flowers/rose",target_size = (1,5),class_mode ='categorical',batch_size=10)

x_train.class_indices

from tensorflow.keras.models import Sequential

from tensorflow.keras.layers import Dense,Convolution2D,MaxPooling2D,Flatten

model= Sequential()

model.add(Convolution2D(32,(3,3),input_shape=(64,64,3),activation = 'relu')) #Feature Map

model.add(MaxPooling2D(pool_size = (2,2)))  #Pooled Matrix

model.add(Flatten())

model.summary()

32*(3*3*3+1)

model.add(Dense(300, activation = 'relu'))
model.add(Dense(150,activation ='relu'))

model.add(Dense(4,activation='softmax'))

model.compile(loss='categorical_crossentropy', optimizer='adam',metrics=['accuracy'])

len(x_train)

1238/24

len(x_test)

326/24

ls

model.save('flowers.h5')

ls

import numpy as np

from tensorflow.keras.models import load_model

from tensorflow.keras.preprocessing import image

model = load_model('flowers.h5')

pwd

img = image.load_img(r'/content/drive/MyDrive/New folder/flowers/daisy/43474673_7bb4465a86.jpg')

img

img = image.load_img(r'/content/drive/MyDrive/New folder/flowers/daisy/43474673_7bb4465a86.jpg',target_size=(64,64))

img

x=image.img_to_array(img)

x

x.shape

x= np.expand_dims(x,axis=0)

y = np.argmax(model.predict(x), axis=1)

y

x_train.class_indices

index = ['daisy','dandelion','rose','sunflower','tulip']

index[y[0]]

index[3]